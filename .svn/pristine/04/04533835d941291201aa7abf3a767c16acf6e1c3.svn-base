package com.csumb.viewer;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.List;
import java.util.concurrent.ExecutionException;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;

import com.csumb.viewer.Response.Candidates;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class MainActivity extends Activity {

	private LatLng currentLocation;
	private LocationManager lManager;
	private Location location;
	private Response response;
	private Data data;
	private double longitude;
	private double latitude;
	private GoogleMap mMap;
	private Button mButton;
	private EditText mEdit;
	private Candidates bestChoice;
	private String address;
	private String request;
	private URLEncoder URL;
	private String URLXY="http://tasks.arcgisonline.com/ArcGIS/rest/services/Locators/TA_Address_NA_10/" +
			"GeocodeServer/findAddressCandidates?Address=&City=&State=&Zip=&Zip4=&Country=&SingleLine="+request+"&outFields=*&outSR=102113&f=pjson";

	MapFragment mMapFragment = MapFragment.newInstance();
	 android.app.FragmentTransaction fragmentTransaction =
	         getFragmentManager().beginTransaction();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
			setContentView(R.layout.main);
			
			lManager= (LocationManager)getSystemService(Context.LOCATION_SERVICE);
			location=lManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
			longitude=location.getLongitude();latitude=location.getLatitude();
			currentLocation=new LatLng(latitude, longitude);
			

			mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
			mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLocation, 7));
			fragmentTransaction.add(R.id.map, mMapFragment);
			fragmentTransaction.commit();	
			
			
			mButton=(Button)findViewById(R.id.addressButton);
			mEdit=(EditText)findViewById(R.id.addressBar);		
	
			mButton.setOnClickListener(
					new View.OnClickListener() 
					{	
						@Override
						public void onClick(View view)
						{
							Log.v("EditText", mEdit.getText().toString());
						}
					});
 		
			String address= mEdit.getText().toString();			
			try {
				 request=URLEncoder.encode(address, "UTF-8");
			} catch (UnsupportedEncodingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			try {
				response=new ResponseSync().execute(URLXY).get();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			int spatial=response.spatialReference.wkid;
			List<Candidates> candidate = response.candidates;
			bestChoice=getBestScore(candidate);
			
	
			try {
				data=getData(bestChoice, spatial);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			addMarker(mMap, data, bestChoice);

	}

		private Candidates getBestScore(List<Candidates> list)
			{
				Candidates candidate=null;
				
				for(int i=0; i<list.size(); i++)
				{
					if(list.get(i).getScore()==100)
					{
						candidate=list.get(i);
						break;
					}
					else if(list.get(i).getScore()>=90)
					{
						candidate=list.get(i);
						break;
					}
					else if(list.get(i).getScore()<90 )
					{
						candidate=list.get(i);
						break;
					}
				}
				return candidate;
			}
		
		private Data getData(Candidates x, int spatial) throws InterruptedException, ExecutionException
		{

			String URL = "http://132.241.99.43/ArcGIS/rest/services/CPUC/ALL_AVAILABILITY_RD6/MapServer/0/query?text=&geometry=" +
					x.location.x+"%2C"+x.location.y+"&geometryType=esriGeometryPoint&inSR="+spatial+"&spatialRel=esriSpatialRelIntersects&" +
					"relationParam=&objectIds=&where=&time=&returnCountOnly=false&returnIdsOnly=false&returnGeometry=false&maxAllowable" +
					"Offset=&outSR=&outFields=*&f=pjson";
;
			Data Datas;
			Datas=new DataResponse().execute(URL).get();
			return Datas;
								
		}

		
		private void addMarker(GoogleMap map, Data data, Candidates bestChoice)
		{
			
			map.addMarker(new MarkerOptions().position(new LatLng(bestChoice.attributes.dispLat, bestChoice.
					attributes.dispLong)));//.title(data.features.attributes.size()+"Sources Found"));
			
			
			
		}

}

 
