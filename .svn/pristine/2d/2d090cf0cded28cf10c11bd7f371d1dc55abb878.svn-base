package com.csumb.viewer;

//import java.io.BufferedInputStream;
import java.io.IOException;
import com.csumb.viewer.Response;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.List;
//import java.net.HttpURLConnection;
//import java.net.URL;

import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.gson.Gson;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
//import android.provider.Settings;
import android.app.Activity;
import android.content.Context;
//import android.content.Intent;
//import android.support.v4.app.FragmentTransaction;
import android.util.Log;
//import android.view.Menu;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
//import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
//import org.apache.http.util.EntityUtils;
//import org.json.JSONArray;
//import org.json.JSONObject;

public class MainActivity extends Activity {

	private LocationManager lManager;
	private Response response;
	private Location location;
	private double longitude;
	private double latitude;
	private Gson gson;
	private GoogleMap mMap;
	private String address;
	private String URLXY="http://tasks.arcgisonline.com/ArcGIS/rest/" +
			"services/Locators/TA_Address_NA_10/GeocodeServer/findAddressCandidates" +
			"?Address=&City=&State=&Zip=&Zip4=&Country=&SingleLine="+address+"&outFields=*&outSR=102113&f=pjson";

	MapFragment mMapFragment = MapFragment.newInstance();
	 android.app.FragmentTransaction fragmentTransaction =
	         getFragmentManager().beginTransaction();
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
			setContentView(R.layout.main);
			
			lManager= (LocationManager)getSystemService(Context.LOCATION_SERVICE);
			location=lManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
			longitude=location.getLongitude();
			latitude=location.getLatitude();
			
			response=getJson(URLXY);
			List<Candidates> candidate = response.candidate;
			
			
			mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
			fragmentTransaction.add(R.id.map, mMapFragment);
			fragmentTransaction.commit();
			
			
			
			
			/*mMap.addMarker(new MarkerOptions()
			        .position(new LatLng(0, 0))
			        .title("Hello world"));
			*/
	}
	
	Response getJson (String URL)
	{
		 InputStream source = retrieveStream(URL);
		 Gson gson = new Gson();
		 Reader reader = new InputStreamReader(source);	 
		 Response response = gson.fromJson(reader, Response.class);
		 return response;
	}
	
private InputStream retrieveStream(String url) {
        
        DefaultHttpClient client = new DefaultHttpClient(); 
        HttpGet getRequest = new HttpGet(url);
          
        try {
           
           HttpResponse getResponse = client.execute(getRequest);
           final int statusCode = getResponse.getStatusLine().getStatusCode();
           
           if (statusCode != HttpStatus.SC_OK) { 
              Log.w(getClass().getSimpleName(), 
                  "Error " + statusCode + " for URL " + url); 
              return null;
           }

           HttpEntity getResponseEntity = getResponse.getEntity();
           return getResponseEntity.getContent();
           
        } 
        catch (IOException e) {
           getRequest.abort();
           Log.w(getClass().getSimpleName(), "Error for URL " + url, e);
        }
        
        return null;       
     }
}
	

