package com.csumb.viewer;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Debug;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.view.KeyEvent;

import android.widget.TextView.OnEditorActionListener;
import com.csumb.viewer.Response.Candidates;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.GoogleMap.OnMapLongClickListener;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

public class MainActivity extends Activity implements OnMapClickListener, OnMapLongClickListener, OnMarkerClickListener {

	private LatLng currentLocation;
	private LocationManager lManager;
	private Location location;
	private Response response;
	private double longitude;
	private double latitude;
	private GoogleMap mMap;
	private Candidates bestChoice;
	private String address;
	private String request;
	private String URLXY;
	private int spatial;
	private GoogleJ Gj;
	private Marker marker;

	//MapFragment mMapFragment = MapFragment.newInstance();
	 //android.app.FragmentTransaction fragmentTransaction =getFragmentManager().beginTransaction();
	 
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
			setContentView(R.layout.main);
			
			android.app.FragmentManager myFragmentManager = getFragmentManager();
			MapFragment mMapFragment 
			   = (MapFragment)myFragmentManager.findFragmentById(R.id.map);
			  mMap = mMapFragment.getMap();
			  
			  
			lManager= (LocationManager)getSystemService(Context.LOCATION_SERVICE);
			location=lManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
			longitude=location.getLongitude();latitude=location.getLatitude();
			currentLocation=new LatLng(latitude, longitude);

			mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(currentLocation, 7));
							
			
			ActionBar actionBar = getActionBar();

			actionBar.setCustomView(R.layout.actionbar_view);

			final EditText search = (EditText) actionBar.getCustomView().findViewById(R.id.searchfield);
			
			search.setOnEditorActionListener(new OnEditorActionListener() 
			{
				@Override
				public boolean onEditorAction(TextView v, int actionId,KeyEvent event) 
				{
				
					if(marker!=null)
					{
						marker.remove();
					}
					
					address= search.getText().toString();			
					try {
						 request=URLEncoder.encode(address, "UTF-8");
						 
					} catch (UnsupportedEncodingException e1) {
						e1.printStackTrace();
					}
					URLXY="http://tasks.arcgisonline.com/ArcGIS/rest/services/Locators/TA_Address_NA_10/" +
							"GeocodeServer/findAddressCandidates?Address=&City=&State=&Zip=&Zip4=&Country=&SingleLine="+request+"&outFields=*&outSR=102113&f=pjson";
					
					try {
						System.out.println(URLXY);
						response=new ResponseSync(MainActivity.this).execute(URLXY).get();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ExecutionException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					spatial=response.spatialReference.wkid;
					List<Candidates> candidates = response.candidates;
					bestChoice=getBestScore(candidates);
					
		
					marker= mMap.addMarker(new MarkerOptions().position(new LatLng(bestChoice.attributes.dispLat, bestChoice.
							attributes.dispLong)));
					
					return true;
				}
			});
			
			actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM | ActionBar.DISPLAY_SHOW_HOME);
			
			mMap.setOnMapLongClickListener(this);
			
			Debug.startMethodTracing("NewIntent");

			mMap.setOnMarkerClickListener(this);
			
			Debug.stopMethodTracing();
			
			mMap.setOnMapClickListener(this);
			
	}

		private Candidates getBestScore(List<Candidates> list)
			{
			Candidates candidate=null;
			Spinner spinner = (Spinner) findViewById(R.id.spinner1);
			List<String> SpinnerArray =  new ArrayList<String>();
			 
			 
			 for(int i=0; i<list.size(); i++)
			 {
				 
				 if(list.get(i).score > 70)
				 {
					 SpinnerArray.add(list.get(i).address);
				 }
				 
			 }
			 
			 ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, SpinnerArray);
			 adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			 Spinner Items = (Spinner) findViewById(R.id.spinner1);
			 Items.setAdapter(adapter);
			
			 String selected = Items.getSelectedItem().toString();	 
			 
			 for(int i=0; i<list.size();i++)
			 {
				 if(selected==list.get(i).address)
				 {
					candidate=list.get(i);
				 }
			 }
			
			/*	
				for(int i=0; i<list.size(); i++)
				{
					if(list.get(i).getScore()==100)
					{
						candidate=list.get(i);
						break;
					}
					else if(list.get(i).getScore()>=90)
					{
						candidate=list.get(i);
						break;
					}
					else if(list.get(i).getScore()<90 )
					{
						candidate=list.get(i);
						break;
					}
				}
					*/			
				return candidate;
			}
		
		

		@Override
		public boolean onMarkerClick(Marker arg0) {
			
			Intent intent = new Intent(this, DisplayInfo.class);
            
			intent.putExtra("spatial", spatial);
			intent.putExtra("x", bestChoice.location.x);
			intent.putExtra("y", bestChoice.location.y);
			
			startActivity(intent);
			
			return false;
		}

		@Override
		public void onMapLongClick(LatLng arg0) {}

		@Override
		public void onMapClick(LatLng arg0) {
			
			if(marker!=null)
			{
				marker.remove();
			}
			marker= mMap.addMarker(new MarkerOptions().position(new LatLng(arg0.latitude, arg0.longitude)));
			
			String reverseGeo="http://maps.googleapis.com/maps/api/geocode/json?latlng="+arg0.latitude+","+arg0.longitude+"&sensor=true";
			
			 try {
				Gj=new ReverseGeo().execute(reverseGeo).get();
			} catch (InterruptedException e) {
				e.printStackTrace();
			} catch (ExecutionException e) {
				e.printStackTrace();
			}
			 			
			 String address=Gj.results.get(0).formatted_address;
			
			 try {
				 request=URLEncoder.encode(address, "UTF-8");
				 
			} catch (UnsupportedEncodingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			URLXY="http://tasks.arcgisonline.com/ArcGIS/rest/services/Locators/TA_Address_NA_10/" +
					"GeocodeServer/findAddressCandidates?Address=&City=&State=&Zip=&Zip4=&Country=&SingleLine="+request+"&outFields=*&outSR=102113&f=pjson";
			
			try {
				response=new ResponseSync(MainActivity.this).execute(URLXY).get();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ExecutionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			spatial=response.spatialReference.wkid;
			List<Candidates> candidates = response.candidates;
			bestChoice=getBestScore(candidates);
		}

}

 
